// Mocks generated by Mockito 5.3.2 from annotations
// in dicoding_ditonton_app/test/presentation/pages/movies/movie_detail_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i11;
import 'dart:ui' as _i12;

import 'package:dicoding_ditonton_app/common/result_state.dart' as _i9;
import 'package:dicoding_ditonton_app/domain/entities/movies/movies.dart'
    as _i10;
import 'package:dicoding_ditonton_app/domain/entities/movies/movies_detail.dart'
    as _i7;
import 'package:dicoding_ditonton_app/domain/usecases/movies/get_movie_detail.dart'
    as _i2;
import 'package:dicoding_ditonton_app/domain/usecases/movies/get_movie_recommendations.dart'
    as _i3;
import 'package:dicoding_ditonton_app/domain/usecases/movies/get_watchlist_status_movie.dart'
    as _i4;
import 'package:dicoding_ditonton_app/domain/usecases/movies/remove_watchlist_movie.dart'
    as _i6;
import 'package:dicoding_ditonton_app/domain/usecases/movies/save_watchlist_movie.dart'
    as _i5;
import 'package:dicoding_ditonton_app/presentation/provider/movies/movies_detail_provider.dart'
    as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetMovieDetail_0 extends _i1.SmartFake
    implements _i2.GetMovieDetail {
  _FakeGetMovieDetail_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetMovieRecommendations_1 extends _i1.SmartFake
    implements _i3.GetMovieRecommendations {
  _FakeGetMovieRecommendations_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetWatchListStatusMovie_2 extends _i1.SmartFake
    implements _i4.GetWatchListStatusMovie {
  _FakeGetWatchListStatusMovie_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSaveWatchlistMovie_3 extends _i1.SmartFake
    implements _i5.SaveWatchlistMovie {
  _FakeSaveWatchlistMovie_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRemoveWatchlistMovie_4 extends _i1.SmartFake
    implements _i6.RemoveWatchlistMovie {
  _FakeRemoveWatchlistMovie_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMoviesDetail_5 extends _i1.SmartFake implements _i7.MoviesDetail {
  _FakeMoviesDetail_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MoviesDetailProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockMoviesDetailProvider extends _i1.Mock
    implements _i8.MoviesDetailProvider {
  MockMoviesDetailProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetMovieDetail get getMovieDetail => (super.noSuchMethod(
        Invocation.getter(#getMovieDetail),
        returnValue: _FakeGetMovieDetail_0(
          this,
          Invocation.getter(#getMovieDetail),
        ),
      ) as _i2.GetMovieDetail);
  @override
  _i3.GetMovieRecommendations get getMovieRecommendations =>
      (super.noSuchMethod(
        Invocation.getter(#getMovieRecommendations),
        returnValue: _FakeGetMovieRecommendations_1(
          this,
          Invocation.getter(#getMovieRecommendations),
        ),
      ) as _i3.GetMovieRecommendations);
  @override
  _i4.GetWatchListStatusMovie get getWatchListStatusMovie =>
      (super.noSuchMethod(
        Invocation.getter(#getWatchListStatusMovie),
        returnValue: _FakeGetWatchListStatusMovie_2(
          this,
          Invocation.getter(#getWatchListStatusMovie),
        ),
      ) as _i4.GetWatchListStatusMovie);
  @override
  _i5.SaveWatchlistMovie get saveWatchlistMovie => (super.noSuchMethod(
        Invocation.getter(#saveWatchlistMovie),
        returnValue: _FakeSaveWatchlistMovie_3(
          this,
          Invocation.getter(#saveWatchlistMovie),
        ),
      ) as _i5.SaveWatchlistMovie);
  @override
  _i6.RemoveWatchlistMovie get removeWatchlistMovie => (super.noSuchMethod(
        Invocation.getter(#removeWatchlistMovie),
        returnValue: _FakeRemoveWatchlistMovie_4(
          this,
          Invocation.getter(#removeWatchlistMovie),
        ),
      ) as _i6.RemoveWatchlistMovie);
  @override
  _i7.MoviesDetail get movie => (super.noSuchMethod(
        Invocation.getter(#movie),
        returnValue: _FakeMoviesDetail_5(
          this,
          Invocation.getter(#movie),
        ),
      ) as _i7.MoviesDetail);
  @override
  _i9.ResultState get movieState => (super.noSuchMethod(
        Invocation.getter(#movieState),
        returnValue: _i9.ResultState.empty,
      ) as _i9.ResultState);
  @override
  List<_i10.Movies> get movieRecommendations => (super.noSuchMethod(
        Invocation.getter(#movieRecommendations),
        returnValue: <_i10.Movies>[],
      ) as List<_i10.Movies>);
  @override
  _i9.ResultState get movieRecommendationState => (super.noSuchMethod(
        Invocation.getter(#movieRecommendationState),
        returnValue: _i9.ResultState.empty,
      ) as _i9.ResultState);
  @override
  String get message => (super.noSuchMethod(
        Invocation.getter(#message),
        returnValue: '',
      ) as String);
  @override
  bool get isAddedToWatchlist => (super.noSuchMethod(
        Invocation.getter(#isAddedToWatchlist),
        returnValue: false,
      ) as bool);
  @override
  String get watchlistMessage => (super.noSuchMethod(
        Invocation.getter(#watchlistMessage),
        returnValue: '',
      ) as String);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);
  @override
  _i11.Future<void> fetchMovieDetail(int? id) => (super.noSuchMethod(
        Invocation.method(
          #fetchMovieDetail,
          [id],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);
  @override
  _i11.Future<void> addWatchlistMovie(_i7.MoviesDetail? movie) =>
      (super.noSuchMethod(
        Invocation.method(
          #addWatchlistMovie,
          [movie],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);
  @override
  _i11.Future<void> removeFromWatchlistMovie(_i7.MoviesDetail? movie) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeFromWatchlistMovie,
          [movie],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);
  @override
  _i11.Future<void> loadWatchlistStatusMovie(int? id) => (super.noSuchMethod(
        Invocation.method(
          #loadWatchlistStatusMovie,
          [id],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);
  @override
  void addListener(_i12.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i12.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
